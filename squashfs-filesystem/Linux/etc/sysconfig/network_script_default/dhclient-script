#!/bin/sh
# dhclient-script for Linux. Dan Halbert, March, 1997.
# Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
# No guarantees about this. I'm a novice at the details of Linux
# networking.

# Notes:

# 0. This script is based on the netbsd script supplied with dhcp-970306.

# 1. ifconfig down apparently deletes all relevant routes and flushes
# the arp cache, so this doesn't need to be done explicitly.

# 2. The alias address handling here has not been tested AT ALL.
# I'm just going by the doc of modern Linux ip aliasing, which uses
# notations like eth0:0, eth0:1, for each alias.

# 3. I have to calculate the network address, and calculate the broadcast
# address if it is not supplied. This might be much more easily done
# by the dhclient C code, and passed on.

# 4. TIMEOUT not tested. ping has a flag I don't know, and I'm suspicious
# of the $1 in its args.

# 'ip' just looks too weird.  /sbin/ip looks less weird.
ip=/bin/ip

DEBUG=on
dbecho ()
{
    if [ ! -z "${DEBUG}" ]; then
#       echo "${1}"
        echo "${1}" > /dev/console
    fi
}


# Set up a default search path.
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
export PATH

# Read committed settings (from last run of iDRACNet script)
############################################################
OLD_CONF_DIR=/tmp/network_config
CONF_FILE=iDRACnet.old
if [[ -e ${OLD_CONF_DIR}/${CONF_FILE} ]]; then
    dbecho "Reading committed configuration..."
    source ${OLD_CONF_DIR}/${CONF_FILE}
else
    echo "Failed to read committed configuration."
    exit 0
fi

make_resolv_conf() {  
	
    if [ "x${new_dhcp6_name_servers}" != x ] ; then
        cat /dev/null > /etc/resolv.conf.dhclient6
        chmod 644 /etc/resolv.conf.dhclient6
	
        if [ "x${new_dhcp6_domain_search}" != x ] ; then
            echo search ${new_dhcp6_domain_search} >> /etc/resolv.conf.dhclient6
        fi
	
        shopt -s nocasematch 
        for nameserver in ${new_dhcp6_name_servers} ; do
            # If the nameserver has a link-local address
            # add a <zone_id> (interface name) to it.
            if  [[ "$nameserver" =~ ^fe80:: ]]
            then
		zone_id="%$interface"
            else
		zone_id=
            fi
            echo nameserver ${nameserver}$zone_id >> /etc/resolv.conf.dhclient6
        done
        shopt -u nocasematch 

	RESOLV_TEMP=/etc/resolv.conf.dhclient6
	ISC_TEXT="#--- Needed for dhclient (DO NOT REMOVE) ---"
	
	# Invoke this when /etc/resolv.conf has changed:
	dbecho "======== change_resolv_conf ================"
	dbecho "interface is $interface"
	dbecho "New resolv.conf is ${RESOLV_TEMP}"
	cat ${RESOLV_TEMP} > /dev/console

	sed -n "/${ISC_TEXT}/,$ p" ${RESOLV_TEMP}
	V6_DNS1=`grep nameserver ${RESOLV_TEMP} | awk '{if(NR==1) print $2}'`
	V6_DNS2=`grep nameserver ${RESOLV_TEMP} | awk '{if(NR==2) print $2}'`
	DOMAINNAME=$(grep search ${RESOLV_TEMP} | cut -d" " -f2)

	dbecho "New DNS Server #1=${V6_DNS1}"
	dbecho "New DNS Server #2=${V6_DNS2}"
	dbecho "Domain=${DOMAINNAME}"
	
	if [[ "${OLD_V6_AUTOCONF_ENABLED}" != "yes" ]] || [[ "${OLD_V6_DNS_FROM_DHCP_ENABLED}" != "yes" ]]; then
		dbecho "WARNING: DHCPv6 isn't enabled so this shouldn't be running."
	fi

	# Build configuration string
	CONFIG="idrac inet6 dhcp_renew"
	UPDATE=no

	if [[ "${OLD_DOMAIN_FROM_DHCP_ENABLED}" == "yes" ]] && [[ "${DOMAINNAME}" != "" ]]; then
		dbecho "Updating domain..."
		
		# Update system domain name setting
		echo -n ${DOMAINNAME} > /proc/sys/kernel/domainname
		
		CONFIG="${CONFIG} domain ${DOMAINNAME}"	
		UPDATE=yes
	else
		dbecho "Skipping domain update..."
	fi
	
	if [[ "${OLD_V6_DNS_FROM_DHCP_ENABLED}" == "yes" ]] && [[ "${V6_DNS1}" != "" ]]; then
		dbecho "Adding DNS servers..."

		CONFIG="${CONFIG} dns1 ${V6_DNS1}"
		
		if [[ "${V6_DNS2}" != "" ]]; then
			CONFIG="${CONFIG} dns2 ${V6_DNS2}"
#		elif [[ "${OLD_V6_DNS1}" != "::" ]]; then
#			dbecho "Using current DNS \"${CURRENT_V6_DNS1}\" as V6_DNS2"
#			CONFIG="${CONFIG} dns2 ${OLD_V6_DNS1}"
		fi
	
		UPDATE=yes
	else
		dbecho "Skipping update of DNS servers..."
	fi

	if [[ "${UPDATE}" == "yes" ]]; then	
		dbecho "Configuration command line: ${CONFIG}"
		/avct/sbin/avctifconfig $CONFIG
	fi
	
	# Remove all temporary resolv.conf files
	rm -rf /etc/resolv.conf.*

	#if [[ -e /tmp/ddns_reg ]]; then
	#	dbecho "Updating V6 DDNS..."
	#	/usr/bin/nsupdate -v /tmp/ddns_reg
        #fi   

    fi
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhclient-exit-hooks ]; then
    . /etc/dhclient-exit-hooks
  fi
# probably should do something with exit status of the local script
  if [ x$dhc_dbus != x -a $exit_status -eq 0 ]; then
    dbus-send --system --dest=com.redhat.dhcp \
      --type=method_call /com/redhat/dhcp/$interface com.redhat.dhcp.set \
      'string:'"`env | grep -Ev '^(PATH|SHLVL|_|PWD|dhc_dbus)\='`"
  fi
  exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

###
### DHCPv6 Handlers
###

if [ x$reason = xPREINIT6 ] ; then
  # Ensure interface is up.
  ${ip} link set ${interface} up

  # Remove any stale addresses from aborted clients.
  ${ip} -f inet6 addr flush dev ${interface} scope global

  exit_with_hooks 0
fi

if [ x${old_ip6_prefix} != x ] || [ x${new_ip6_prefix} != x ] ; then
    echo Prefix ${reason} old=${old_ip6_prefix} new=${new_ip6_prefix}

    exit_with_hooks 0
fi

if [ x$reason = xBOUND6 ] ; then
  if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr add ${new_ip6_address}/${new_ip6_prefixlen} \
	dev ${interface} scope global

  # Check for nameserver options.
  if [[ "${OLD_V6_DNS_FROM_DHCP_ENABLED}" == "yes" ]] || [[ "${OLD_DOMAIN_FROM_DHCP_ENABLED}" == "yes" ]]; then
      make_resolv_conf
  fi

  exit_with_hooks 0
fi

if [ x$reason = xRENEW6 ] || [ x$reason = xREBIND6 ] ; then
  if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr add ${new_ip6_address}/${new_ip6_prefixlen} \
	dev ${interface} scope global

  # Make sure nothing has moved around on us.

  # Nameservers/domains/etc.
  if [ "x${new_dhcp6_name_servers}" != "x${old_dhcp6_name_servers}" ] ||
     [ "x${new_dhcp6_domain_search}" != "x${old_dhcp6_domain_search}" ] ; then
    if [[ "${OLD_V6_DNS_FROM_DHCP_ENABLED}" == "yes" ]] || [[ "${OLD_DOMAIN_FROM_DHCP_ENABLED}" == "yes" ]]; then
        make_resolv_conf
    fi
  fi

  exit_with_hooks 0
fi

if [ x$reason = xDEPREF6 ] ; then
  if [ x${new_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr change ${new_ip6_address}/${new_ip6_prefixlen} \
       dev ${interface} scope global preferred_lft 0

  exit_with_hooks 0
fi

if [ x$reason = xEXPIRE6 -o x$reason = xRELEASE6 -o x$reason = xSTOP6 ] ; then
  if [ x${old_ip6_address} = x ] || [ x${old_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr del ${old_ip6_address}/${old_ip6_prefixlen} \
	dev ${interface}
	
  exit_with_hooks 0
fi

exit_with_hooks 0
